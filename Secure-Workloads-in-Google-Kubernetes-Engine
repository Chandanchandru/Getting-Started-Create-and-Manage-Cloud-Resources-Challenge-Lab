Secure Workloads in Google Kubernetes Engine: Challenge Lab




Task 0:

gsutil cp gs://spls/gsp335/gsp335.zip .
unzip gsp335.zip



Task 1:

gcloud container clusters create [REPLACE Cluster name]\
   --zone us-central1-c \
   --machine-type n1-standard-4 \
   --num-nodes 2 \
   --enable-network-policy


gcloud container clusters get-credentials [REPLACE Cluster name] \
--zone us-central1-c



Task 2:

gcloud sql instances create [REPLACE Instance name] --region us-central1

Navigation Menu-> SQL -> in the Left Side Database -> Create New database -> Database name:- wordpress -> Click create

gcloud sql users create wordpress1 --instance=[REPLACE Instance name] --host=% --password='password'



gcloud iam service-accounts create [REPLACE Service Account name]

gcloud projects add-iam-policy-binding $DEVSHELL_PROJECT_ID\   
--member="serviceAccount:[REPLACE Service Account name]@$DEVSHELL_PROJECT_ID.iam.gserviceaccount.com"\   
--role="roles/cloudsql.client"

gcloud iam service-accounts keys create key.json --iam-account=[REPLACE Service Account name]@$DEVSHELL_PROJECT_ID.iam.gserviceaccount.com

kubectl create secret generic cloudsql-instance-credentials --from-file key.json

kubectl create secret generic cloudsql-db-credentials \
   --from-literal username=wordpress \
   --from-literal password='password'


kubectl create -f volume.yaml


Now, go to editor and replace instance name with sql instance name 
save (click on sql and overview then click copy to the url) {oof! check the below video if you didn't get it}

kubectl apply -f wordpress.yaml



Task 3:

helm repo add stable https://kubernetes-charts.storage.googleapis.com/
helm repo add stable https://charts.helm.sh/stable
helm repo update
helm install nginx-ingress stable/nginx-ingress

kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.16.0/cert-manager.yaml

kubectl get svc

Check the service nginx-ingress-controller as an external IP address before continuing to the next step.

sed -i s/LAB_EMAIL_ADDRESS/sa-wordpress@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com/g issuer.yaml
kubectl apply -f issuer.yaml

If you face any internal error, execute the command again

. add_ip.sh

HOST_NAME=$(echo $USER | tr -d '_').labdns.xyz
sed -i s/HOST_NAME/${HOST_NAME}/g ingress.yaml
kubectl apply -f ingress.yaml








Task 4:

kubectl apply -f network-policy.yaml

nano network-policy.yaml

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-world-to-nginx-ingress
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: nginx-ingress
  policyTypes:
  - Ingress
  ingress:
  - {}






Task 5:




gcloud services enable \
   container.googleapis.com \
   containeranalysis.googleapis.com \
   binaryauthorization.googleapis.com

goto security - Binary authorization enable it and click on edit policy under specific rule select gke rule

- configure policy 
- disallow all images
- create specific rules, select cluster
- add specific rule, type us and select from dropdown, click add
- custom expetion path 
- add iamge paths given 
- save policy 

enable binary authorization for Kubernetes cluster




#### Edit and add the four values and change
- namePattern: docker.io/library/wordpress:latest
- namePattern: us.gcr.io/k8s-artifacts-prod/ingress-nginx/*
- namePattern: gcr.io/cloudsql-docker/*
- namePattern: quay.io/jetstack/*
defaultAdmissionRule:
 enforcementMode: ENFORCED_BLOCK_AND_AUDIT_LOG
 evaluationMode: ALWAYS_DENY
globalPolicyEvaluationMode: ENABLE
##########

The file should look like this -


gcloud container binauthz policy import bin-auth-policy.yaml






Task 6: 

kubectl apply -f psp-restrictive.yaml
kubectl apply -f psp-role.yaml
kubectl apply -f psp-use.yaml
