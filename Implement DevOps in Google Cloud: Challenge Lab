Implement DevOps in Google Cloud: Challenge Lab


First Task -------

gcloud config set compute/zone us-east1-b

git clone https://source.developers.google.com/p/$DEVSHELL_PROJECT_ID/r/sample-app

gcloud container clusters get-credentials jenkins-cd

kubectl create clusterrolebinding cluster-admin-binding --clusterrole=cluster-admin --user=$(gcloud config get-value account)

helm repo add stable https://charts.helm.sh/stable

helm repo update

helm install cd stable/jenkins

export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/component=jenkins-master" -l "app.kubernetes.io/instance=cd" -o jsonpath="{.items[0].metadata.name}")
kubectl port-forward $POD_NAME 8080:8080 >> /dev/null &
printf $(kubectl get secret cd-jenkins -o jsonpath="{.data.jenkins-admin-password}" | base64 --decode);echo

cd sample-app
kubectl create ns production
kubectl apply -f k8s/production -n production
kubectl apply -f k8s/canary -n production
kubectl apply -f k8s/services -n production

kubectl get svc
kubectl get service gceme-frontend -n production

After these commands do the jenkins part then do the rest commands -

//To get to the Jenkins user interface, click on the Web Preview button in cloud shell, then click Preview on port 8080

Configure a Service Account Credential.

//Now create the Jinkins pipeline as per the images below.




Configure a multibranch Jenkins pipeline job using the Jenkinsfile Jenkins job configuration file included in the root of the sample-app repository.

Go back to the Dashboard and add a new item. 
Name the item “sample-app”

NOTE: Using git credentials to access: https://source.developers.google.com/p/[PROJECT_ID]/r/sample-app



NOTE:  Wait for the Pipeline and the master to complete Successfully. To monitor the master, go to Jenkins homepage and click on the Sample-App option, inside that you will see the progress of master. Wait until it turns blue. Refresh the page to see the progress update. 


git init
git config credential.helper gcloud.sh
git remote add origin https://source.developers.google.com/p/$DEVSHELL_PROJECT_ID/r/sample-app
git config --global user.email "<user email>"
git config --global user.name "<user name>"
git add .
git commit -m "initial commit"
git push origin master


2nd Task -----

git checkout -b new-feature

After this command make the required changes!

git add Jenkinsfile html.go main.go
git commit -m "Version 2.0.0"
git push origin new-feature

3rd Task ----------

curl http://localhost:8001/api/v1/namespaces/new-feature/services/gceme-frontend:80/proxy/version
kubectl get service gceme-frontend -n production 
git checkout -b canary
git push origin canary
export FRONTEND_SERVICE_IP=$(kubectl get -o \
jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)
git checkout master
git push origin master

4rth Task -------

export FRONTEND_SERVICE_IP=$(kubectl get -o \
jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)
while true; do curl http://$FRONTEND_SERVICE_IP/version; sleep 1; done

kubectl get service gceme-frontend -n production

git merge canary
git push origin master
export FRONTEND_SERVICE_IP=$(kubectl get -o \
jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)

DONE --------
Please carefully refer to the URL https://drive.google.com/file/d/1k2wmuh_NUrrPkGWw-Z5pM8eHL40Dnlok/view .
